#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander'),
    util = require('util'),
    dox = require('dox'),
    formatter = require('../lib/dox-foundation');

/**
 * Options & Defaults
 */

var ignoredDirs = 'test,public,static,views,templates';

program
  .version(formatter.version)
  .option('-r, --raw', 'output "raw" comments, leaving the markdown intact')
  .option('-d, --debug', 'output parsed comments for debugging')
  .option('-t, --title <string>', 'The title for the page produced')
  .option('-s, --source <source>', 'The folder which should get parsed')
  .option('-i, --ignore <directories>', 'Comma seperated list of directories to ignore. Default: ' + ignoredDirs)
  .option('-T, --target <target>', 'The folder which will contain the results. Default: <process.cwd()>/docs');

// examples
program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    # stdin');
  console.log('    $ dox-foundation > myfile.html');
  console.log('');
  console.log('    # operates over stdio');
  console.log('    $ dox-foundation < myfile.js > myfile.html');
  console.log('');
  console.log('    # parse a whole folder');
  console.log('    $ dox-foundation --source ./lib --target ./docs');
});

// parse argv

program.parse(process.argv);

if (program.source) {
  // process a folder

  var fs      = require('fs'),
      target  = program.target || process.cwd() + '/docs',
      source  = program.source,
      ignore  = program.ignore || ignoredDirs;


  // Walker options
  formatter.collectFiles(source, {
    // Cleanup and turn into an array the ignoredDirs
    ignore: ignore.trim().replace(' ','').split(',')
  }, function(files, folders) {
    folders = folders.map(function(folder) { return target + '/' + folder })

    formatter.createFolders([target].concat(folders))

    var data      = formatter.readFileContents(source, target, { raw: program.raw }, files)
      , structure = formatter.getFolderStructure(source, data)

    data.push({
      sourceFile: 'index.html',
      targetFile: target + '/index.html',
      dox: []
    })

    data.forEach(function(data) {
      console.log('Generating documentation for: ', data.sourceFile)

      var options = {
            title: program.title || "Documentation",
            folderStructure: structure,
            subTitle: data.sourceFile
          }
        , output  = formatter.parse(data.dox, options)

      fs.writeFileSync(data.targetFile, output)
    })
  })
} else {
  // process stdin

  var buf = '';
  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function(chunk){ buf += chunk; });
  process.stdin.on('end', function(){
    // Run the buffer through Dox
    var obj = dox.parseComments(buf, { raw: program.raw });
    // If debug, just throw out the dox json
    if (program.debug) {
      process.stdout.write(util.inspect(obj, false, Infinity, true) + '\n');
    } else {
      // Run the json to be formatted and dumped to stdout
      var output = formatter.parse(obj, { title: program.title, folderStructure: null });
      process.stdout.write(output);
    }
  }).resume();
}
