#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program   = require('commander'),
    util      = require('util'),
    fs        = require('fs'),
    path      = require('path'),
    dox       = require('dox'),
    formatter = require('../lib/dox-foundation');

/**
 * Options & Defaults
 */

var ignoredDirs = 'test,public,static,views,templates';

program
  .version(formatter.version)
  .option('-r, --raw', 'output \'raw\' comments, leaving the markdown intact')
  .option('-d, --debug', 'output parsed comments for debugging')
  .option('-t, --title <string>', 'The title of the library or program you are generating code for (eg: Express). Overrides default of "Documentation"')
  .option('-s, --source <source>', 'The folder(s) which should be parsed. Multiple folders should be comma separated')
  .option('-i, --ignore <directories>', 'Comma seperated list of directories to ignore. Overrides default of ' + ignoredDirs)
  .option('-T, --target <target>', 'The folder which will contain the generated documentation. Default: <process.cwd()>/docs')
  .option('--template <jade template>', 'A custom jade template file, overriding the default');

// examples
program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    # stdin');
  console.log('    $ dox-foundation > myfile.html');
  console.log('');
  console.log('    # operates over stdio');
  console.log('    $ dox-foundation < myfile.js > myfile.html');
  console.log('');
  console.log('    # parse a whole folder');
  console.log('    $ dox-foundation --source lib --target docs');
});

// parse argv
program.parse(process.argv);

if(program.template){
  formatter.templatePath = program.template;
}

// If the program specifies a source directory
if (program.source) {
  var target  = path.resolve(process.cwd(), program.target) || process.cwd() + '/docs',
      ignore  = program.ignore || ignoredDirs, source = program.source;

  // Cleanup and turn into an array the ignoredDirs
  ignore = ignore.trim().replace(' ','').split(',');

  // Find, cleanup and validate all potential files
  var files = formatter.collectFiles(source, ignore);
  formatter.createTargetFolders(target, files); 

  // Dox all those files
  files = formatter.doxFiles(source, target, { raw: program.raw }, files);
 
  // Set correct paths to produce the index.html file
  files.push({
    sourceFile: path.relative(process.cwd(), target) + path.sep + 'index.html',
    targetFile: path.relative(process.cwd(), target) + path.sep + 'index.html',
    dox: []
  });

  var options = {};
  if (program.title){
    options.title = program.title;
  } else if(fs.existsSync(process.cwd() + '/package')) {
    options.title = require(process.cwd() + '/package').name;
  } else {
    options.title = 'Documentation';
  }

  // Render and save each file
  files.forEach(function(file) {
    options.subTitle = file.sourceFile;

    var output = formatter.render(file, files, options);
    
    fs.writeFileSync(file.targetFile, output);
  });

} else {
  // process stdin
  var buf = '',
      file = {};

  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function(chunk){ buf += chunk; });
  process.stdin.on('end', function(){
    // Run the buffer through Dox
    file.dox = dox.parseComments(buf, { raw: program.raw });
    // If debug, just throw out the dox json
    if (program.debug) {
      process.stdout.write(util.inspect(file.dox, false, Infinity, true) + '\n');
    } else {
      // Run the json to be formatted and dumped to stdout
      var output = formatter.render(file, null, { title: program.title });
      process.stdout.write(output);
    }
  }).resume();
}
